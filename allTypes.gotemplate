// Copyright (c) 2014 Aubrey Barnard.  This is free software.  See
// LICENSE for details.

// This file contains templates for all the functions that are
// applicable to all of the (comparable) numeric types.  This file is
// not meant to be used directly and hence omits any package
// declaration.

// MinATypes finds the minimum of a slice of ATypes and its index
func MinATypes(nums ...AType) (min AType, index int) {
	if len(nums) == 0 {
		return
	}
	min = nums[0]
	for i := 1; i < len(nums); i++ {
		if nums[i] < min {
			min = nums[i]
			index = i
		}
	}
	return
}

// MaxATypes finds the maximum of a slice of ATypes and its index
func MaxATypes(nums ...AType) (max AType, index int) {
	if len(nums) == 0 {
		return
	}
	max = nums[0]
	for i := 1; i < len(nums); i++ {
		if nums[i] > max {
			max = nums[i]
			index = i
		}
	}
	return
}

// MinMaxATypes finds both extremes of a slice of ATypes and their
// indices
func MinMaxATypes(nums ...AType) (min, max AType, minIndex, maxIndex int) {
	if len(nums) == 0 {
		return
	}
	min = nums[0]
	max = nums[0]
	for i := 1; i < len(nums); i++ {
		if nums[i] < min {
			min = nums[i]
			minIndex = i
		}
		if nums[i] > max {
			max = nums[i]
			maxIndex = i
		}
	}
	return
}

// SumATypes computes the sum of a slice of ATypes.  The sum must fit
// into a AType or it overflows.
func SumATypes(nums ...AType) (sum AType) {
	if len(nums) == 0 {
		return
	}
	for _, value := range nums {
		sum += value
	}
	return
}

// FillATypes fills a slice of ATypes with a given value
func FillATypes(nums []AType, value AType) []AType {
	for i := range nums {
		nums[i] = value
	}
	return nums
}

// EqualATypes compares two slices of ATypes for equality of contents
// and returns the index of the first difference or -1 if the lengths
// differ
func EqualATypes(nums1, nums2 []AType) (equal bool, index int) {
	length := len(nums1)
	if length != len(nums2) {
		return false, -1
	}
	for i := 0; i < length; i++ {
		if nums1[i] != nums2[i] {
			return false, i
		}
	}
	return true, length
}

// FindAType returns the first index of the given value in the slice of
// ATypes
func FindAType(value AType, nums ...AType) (found bool, index int) {
	for i, v := range nums {
		if v == value {
			return true, i
		}
	}
	return
}

// Float64sFromATypes makes a slice of float64s by converting a slice of
// ATypes
func Float64sFromATypes(nums ...AType) (floats []float64) {
	length := len(nums)
	floats = make([]float64, length)
	for i := 0; i < length; i++ {
		floats[i] = float64(nums[i])
	}
	return
}

// AddATypesSc adds the given number (scalar) to each element
func AddATypesSc(addend AType, nums ...AType) (sums []AType) {
	length := len(nums)
	sums = make([]AType, length)
	for i := 0; i < length; i++ {
		sums[i] = nums[i] + addend
	}
	return
}

// SubATypesSc subtracts the given number (scalar) from each element
func SubATypesSc(subtrahend AType, nums ...AType) (differences []AType) {
	length := len(nums)
	differences = make([]AType, length)
	for i := 0; i < length; i++ {
		differences[i] = nums[i] - subtrahend
	}
	return
}

// MulATypesSc multiplies each element by the given number (scalar)
func MulATypesSc(multiplier AType, nums ...AType) (products []AType) {
	length := len(nums)
	products = make([]AType, length)
	for i := 0; i < length; i++ {
		products[i] = nums[i] * multiplier
	}
	return

}

// DivATypesSc divides each element by the given number (scalar)
func DivATypesSc(divisor AType, nums ...AType) (quotients []AType) {
	length := len(nums)
	quotients = make([]AType, length)
	for i := 0; i < length; i++ {
		quotients[i] = nums[i] / divisor
	}
	return
}

